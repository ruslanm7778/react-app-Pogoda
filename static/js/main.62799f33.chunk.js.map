{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","gettingWeather1","type","name","placeholder","Weather","className","city","temp","pressure","error","API_KEY","App","state","undefined","country","gettingWeather","event","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","setState","main","sys","this","contry","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iRAaeA,G,KARF,kBACT,6BACC,6IACA,4LCKUC,EARF,SAACC,GAAD,OACT,0BAAMC,SAAUD,EAAME,iBACrB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2HCYUC,EAfC,SAACN,GAAD,OAChB,yBAAKO,UAAU,aACXP,EAAMQ,MACN,yBAAKD,UAAU,iBACX,8DAAWP,EAAMQ,KAAjB,KACA,iGAAgBR,EAAMS,MACtB,+EAAaT,EAAMU,WAGnB,uBAAGH,UAAU,SAASP,EAAMW,SCP9BC,EAAU,mCA6DDC,E,4MAzDfC,MAAQ,CACNL,UAAKM,EACLP,UAAKO,EACLC,aAAQD,EACRL,cAASK,EACTJ,WAAMI,G,EAGNE,e,uCAAiB,WAAOC,GAAP,mBAAAC,EAAA,yDACfD,EAAME,mBACAZ,EAAOU,EAAMG,OAAOC,SAASd,KAAKe,OAFzB,iCAIGC,MAAM,oDAAD,OAAqDhB,EAArD,kBAAmEI,EAAnE,kBAJR,cAIba,EAJa,gBAKAA,EAAQC,OALR,OAKbC,EALa,OAQnBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZrB,KAAMkB,EAAKI,KAAKtB,KAChBD,KAAMmB,EAAKvB,KACXY,QAASW,EAAKK,IAAIhB,QAClBN,SAAUiB,EAAKI,KAAKrB,SACpBC,MAAM,MAdW,wBAiBb,EAAKmB,SAAS,CAClBrB,UAAMM,EACNP,UAAMO,EACNC,aAASD,EACTL,cAAUK,EACVJ,MAAM,qIAtBW,4C,6GA2BjB,OACE,yBAAKJ,UAAU,WACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBAAf,IAAgC,kBAAC,EAAD,OAChC,yBAAKA,UAAU,iBAAgB,kBAAC,EAAD,CAAML,gBAAiB+B,KAAKhB,iBAC3D,kBAAC,EAAD,CAASR,KAAMwB,KAAKnB,MAAML,KAC9BD,KAAMyB,KAAKnB,MAAMN,KACjB0B,OAAQD,KAAKnB,MAAME,QACnBN,SAAUuB,KAAKnB,MAAMJ,SACrBC,MAAOsB,KAAKnB,MAAMH,iB,GA/CJwB,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLiB,QAAQjB,MAAMA,EAAM2C,a","file":"static/js/main.62799f33.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Info = () =>  (\r\n    <div>\r\n     <h2>Погодное приложение</h2>\r\n     <p>Узнайте погоду в вашем городе</p>\r\n    </div>\r\n  );\r\n\r\n\r\nexport default Info;\r\n","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Form = (props) =>  (\r\n    <form onSubmit={props.gettingWeather1}>\r\n    \t<input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n    \t<button>Получить погоду</button>\r\n    </form>\r\n  );\r\n\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\n\r\n\r\n\r\nconst Weather = (props) => (\r\n<div className=\"infoWeath\">\r\n  \t{props.city &&\r\n    <div className=\"WeatherResult\">\r\n     \t\t\t<p>Город  {props.city} </p>\r\n     \t\t\t<p>Температура {props.temp}</p>\r\n     \t\t\t<p>Давление {props.pressure}</p>\r\n\r\n     \t\t\t </div>}\r\n     \t\t\t<p className=\"error\">{props.error}</p>\r\n     \t\t\t</div>\r\n     \t\t\t\r\n  );\r\n\r\n\r\nexport default Weather;\r\n","import React from 'react';\nimport './App.css';\nimport Info from './components/Info.js'\nimport Form from './components/Form.js'\nimport Weather from './components/Weather.js'\n\n\nconst API_KEY = \"ee734359dde170e9421c377f224d4d4f\"\n\n\nclass App extends React.Component {\nstate = {\n  temp:undefined,\n  city:undefined,\n  country:undefined,\n  pressure:undefined,\n  error:undefined\n}\n\n  gettingWeather = async (event) => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n    if(city) {\nconst api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\nconst data = await api_url.json();\n\n\nconsole.log(data);\nthis.setState({\n  temp: data.main.temp,\n  city: data.name,\n  country: data.sys.country,\n  pressure: data.main.pressure,\n  error:\" \"\n});\n  }\nelse {this.setState({\n  temp: undefined,\n  city: undefined,\n  country: undefined,\n  pressure: undefined,\n  error:\"Введите название города\"\n});}\n\n}\n  render() {\n  return (\n    <div className=\"wrapper\">\n    <div className=\"main\">\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-5 info\"> <Info /></div>\n        <div className=\"col-sm-7 form\"><Form gettingWeather1={this.gettingWeather} />  \n        <Weather temp={this.state.temp}\n    city={this.state.city}\n    contry={this.state.country}\n    pressure={this.state.pressure}\n    error={this.state.error}\n    /></div>\n      </div>\n    </div>\n   </div>\n    \n  \n    </div>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/bootstrap.min.css'\nimport './App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}